#!/bin/bash

# Zone Parser Module - Creates infrastructure.json
# Replaces broken parser with functional implementation

set -euo pipefail

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
DEBUG="${DEBUG:-false}"

# Paths
HOSTNAMES_ZONE="$PROJECT_ROOT/generated/hostnames.zone"
INPUT_CSV="$PROJECT_ROOT/input/new.csv"
DKIM_DATA="$PROJECT_ROOT/output/dkim_data.json"
OUTPUT_JSON="$PROJECT_ROOT/output/infrastructure.json"
PARSED_DIR="$PROJECT_ROOT/parsed"

echo "Infrastructure Generator (from Zone File)"
echo "========================================="

# Check prerequisites
if [[ ! -f "$HOSTNAMES_ZONE" ]]; then
    echo "Error: hostnames.zone not found at $HOSTNAMES_ZONE"
    echo "Run Enhanced Generator first (Option 2)"
    exit 1
fi

echo "Parsing zone file: $HOSTNAMES_ZONE"

# Create parsed directory
mkdir -p "$PARSED_DIR"

# Initialize files
> "$PARSED_DIR/ip.txt"
> "$PARSED_DIR/hostname.txt"
> "$PARSED_DIR/domain.txt"
> "$PARSED_DIR/third_octet.txt"
> "$PARSED_DIR/fourth_octet.txt"

# Parse the zone file
record_count=0
while read -r line; do
    # Skip comments and empty lines
    [[ "$line" =~ ^[[:space:]]*$ ]] || [[ "$line" =~ ^[[:space:]]*\; ]] && continue
    
    # Parse A records (format: hostname. IN A IP or hostname. 300 IN A IP)
    if [[ "$line" =~ ([a-zA-Z0-9.-]+)\.[[:space:]]+([0-9]+[[:space:]]+)?IN[[:space:]]+A[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+) ]]; then
        hostname="${BASH_REMATCH[1]}"
        ip="${BASH_REMATCH[3]}"
        
        # Extract domain from hostname
        domain=$(echo "$hostname" | sed -E 's/^[^.]+\.//')
        
        # Extract octets
        third_octet=$(echo "$ip" | cut -d. -f3)
        fourth_octet=$(echo "$ip" | cut -d. -f4)
        
        # Save to files
        echo "$ip" >> "$PARSED_DIR/ip.txt"
        echo "$hostname" >> "$PARSED_DIR/hostname.txt"
        echo "$domain" >> "$PARSED_DIR/domain.txt"
        echo "$third_octet" >> "$PARSED_DIR/third_octet.txt"
        echo "$fourth_octet" >> "$PARSED_DIR/fourth_octet.txt"
        
        record_count=$((record_count + 1))
    fi
done < "$HOSTNAMES_ZONE"

# Create domain_unique.txt
sort -u "$PARSED_DIR/domain.txt" > "$PARSED_DIR/domain_unique.txt"

echo "✓ Parsed $record_count records"
echo "  Files created in: $PARSED_DIR"
echo ""

# Now create infrastructure.json if DKIM data exists
if [[ -f "$DKIM_DATA" ]]; then
    echo "Creating infrastructure.json..."
    # This is a placeholder - full implementation would merge all data
    echo "{" > "$OUTPUT_JSON"
    echo '  "generated": "'$TIMESTAMP'",' >> "$OUTPUT_JSON"
    echo '  "total_ips": '$record_count',' >> "$OUTPUT_JSON"
    echo '  "status": "parsed_from_zone"' >> "$OUTPUT_JSON"
    echo "}" >> "$OUTPUT_JSON"
    echo "✓ Created infrastructure.json (basic version)"
else
    echo "Note: Run DKIM processor (Option 5) before full infrastructure generation"
fi

echo "========================================="
